# -*- coding: utf-8 -*-
"""
Created on Tue Mar  8 09:13:05 2022

@author: Martin
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import tkinter as tk
import time

# Parameters
Ts = float(input("Enter a samplingtime: "))
SP = float(input("Enter a setpoint: "))
PV = [0,0]
K_p = float(input("Enter a K_p value: "))
T_i = float(input("Enter a T_i value: "))
T_d = float(input("Enter a T_d value: "))
T_t = 0
N = float(input("Enter a filter (N) value: "))
Tr_gain = 0
U_total = 0
e = [0, 0]
U_i = [0, 0]
U_d = [0, 0]

ledPin = 33 # PWM pin on Raspberry Pi
 
# Setup of the PWM pin on the Raspberry Pi
def setup(ledPin):
    global pwm
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(ledPin, GPIO.OUT)
    GPIO.output(ledPin, GPIO.LOW)
    pwm = GPIO.PWM(ledPin, 1000) # Set Frequency to 1 KHz
    pwm.start(0) # Set the starting Duty Cycle
        
# Destroy PWM pin
def destroy():
    pwm.stop()
    GPIO.output(ledPin, GPIO.LOW)
    GPIO.cleanup()
    
# Output value from PID into PWM signal
def FTTR_PID_output(U_total):
    Output_PID = (100/60)*U_total
    pwm.ChangeDutyCycle(Output_PID)

# PID-controller
def FTTR_PID(Ts, SP, y, K_p, T_i, T_d, T_t, Tr_gain, U_total):
    # Check for zero division
    if(T_i > 0):
        alpha = Ts/T_i
    else:
        alpha = 0
        
    if(T_t > 0):
        gamma = Ts/T_t
    else:
        gamma = 0
        
    if((T_d + Ts*N)>0):
        beta = T_d/(T_d+Ts*N)
    else:
        beta = 0
    
    # Calculate error from setpoint
    e[0] = SP - PV[0]
    
    # Proportional control
    U_p = K_p * e[0]
    
    # Clamp P-term
    if(U_p>60):
        U_p = 60
    elif(U_p<0):
        U_p = 0
    
    # Integral control with anti-windup (back calculation)
    U_i[0] = U_i[1] + (K_p * alpha * e[0]) + gamma*(Tr_gain - U_total)
    
    # Clamp I-term
    if(U_i[0]>60):
        U_i[0] = 60
    elif(U_i[0]<0):
        U_i[0] = 0
        
    # Derivative control 
    U_d[0] = beta*U_d[1] - K_p*(T_d/Ts)*(1-beta)*(PV[0]-PV[1])
    
    # Clamp D-term
    if(U_d[0]>60):
        U_d[0] = 60
    elif(U_d[0]<0):
        U_d[0] = 0
    
    # Total control
    U_total = U_p + U_i[0] + U_d[0]
    
    # Clamp total control
    if(U_total>60):
        U_total = 60
    elif(U_total<0):
        U_total = 0
    
    # Update values
    e[1] = e[0]
    PV[1] = PV[0]
    U_i[1] = U_i[0]
    U_d[1] = U_d[0]
    print("PV = ")
    print(PV)
    print("Error = ")
    print(e)
    print("U_p = ")
    print(U_p)
    print("U_i = ")
    print(U_i)
    print("U_total = ")
    print(U_total)
    
    # Samplingtime 
    time.sleep(Ts)
    
# default mode    
Auto = False

# User input
user_input = input("Enter Auto or Manual: ")

if user_input == 'Auto':
    Auto = True
else:
    Auto = False
    
try:
    while Auto == True:
        FTTR_PID(Ts, SP, PV, K_p, T_i, T_d, T_t, Tr_gain, U_total)
except KeyboardInterrupt:
    pass
